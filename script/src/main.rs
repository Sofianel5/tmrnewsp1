//! A simple script to generate and verify the proof of a given program.

use sp1_sdk::{ProverClient, SP1Stdin};
use lib::{ProofInput, PredictionCommitment};

const ELF: &[u8] = include_bytes!("../../program/elf/riscv32im-succinct-zkvm-elf");

fn main() {
    // Generate proof.
    let mut stdin = SP1Stdin::new();

    // Read encoded embeddings from text file
    let embeddings = include_str!("embeddings.txt");
    let embeddings: Vec<&str> = embeddings.lines().collect();
    let mut predictions = Vec::new();
    for embedding in embeddings {
        predictions.push(PredictionCommitment {
            encoded_embedding: embedding.to_string(),
            value: 1e18 as u128
        });
    }

    let truth = PredictionCommitment {
        encoded_embedding: "0xfefd5b1f03dcc0bafdfd9dbeff5c4f78fe5d22aa02c5f0a5fea66367058be14a00fcac9200c2bfdb02511f62fb09da51044e57d9fe366951ffbf8016014bbc50fed3e396fddfd8ddfc3effd7fd5d8e97fbee530800285666fc27c3d50163f02800b2efe9fd8cabd4031b21fe00446992015d295200513d5e0203ff5001b4ef91010b7008fda0adb9026f74d6fd9f10ab026b42e402808f3b020c1098015c8419fe468be101c7f9a00041c0080195a247015f6b9902b7bdc001bf95bcff2914f1feefcd73fdfa1105ff1133b601cc2b93fd34026801226e15fe16c96bfef739820182a28bfbfe7598ffe7e934fdb986cafccb0d1c0203acb400f41f60fe468be1fba60a26ffa38be40052542e01d534b00278d09002652147fa10ba74fcdfb43a04473e670277338202f3c370fe59e88d0106d6d3fca30951fd07b801ffb47cfb03b2cd44fee0a2bbfdffe005fd3fde5c053fb90bfd514b5d04a42e6ffbcad3cc022d4d89fcc203ff00712fe10117f136fd4a9931fc044499009a16d900926cd4ff507382017bd163006b3792033dfc01ff2a0cc7fcad5ce1fccf2a66fde3279ffe3cdd8bfcc0145400b7c71402f468a9fc5a1b2e05c5f7500037fd0bfe9169adfce3939000d3da40fcceec72037c9695017085fefb0e5ee0ff79d66501aa9c0101e98932ff6a825d025838d4025d0ffffd3e93eafefae8c3ffcee8c6fc4fc79f0082dad7fc97b399fc981089039a46d1fda1f82b00d8daba03b0dd9a03e92d3efd6cfc710203077b01451ec80285b903fdf873f6fc957ba601dca0bf02fe16fcfca1bedf043f7fc3fed40ce4fe5e1a7fffd78a9f015c8419fdc5ca04005d6bf104333c89feeaf64a032fc91c024f2fb700f350d802588b71fda43a73fe1e357afddbbb94fec4f6d0013b99c1fd377a77fbe20fcffeee59b50234525602dd2ca7fdec835900471d71fc8f076c01a6bcacfdf4e73d038ac97b023f5fc403be6b45ff71872800d85ecffeb3f113fa30ff930022c55b0034a3f3fe44eed203a91eee0125d17f008aa900024de545fecdc1f9fea23175fd3b59cd03397773ff56951f00c2d48300c62346ff4930c1fe3cdd8b0128e24d033a1cacfd616ded020d086efdea4112ff2777e3feefa42500c1f154036f08e90182983700907d2a031b21fe02c021a4fc7915dc05d6bf18fcf6f03cfd91d59c02d75da7005b005b02624e7002d4c8c3fe8438f20033787c01bb63ca00428e8ffdbdb8bcfd0d8702ff49d5faffdf062bfb0f041903067ae0010873e100e1ba89fe14348703e71449022d4d89ffcfb74dffc7ee4efcc8783800e20d2502b6734e010183bd01b2ad4903029b8a0182ead3fc8d17c1fd2f1693fdd789a2fe96e611ffd0c3c9fefd31d10395c24200a023ce03465fe6ffc2afe000b8beeafdba7e9fff87b6adff24e2ff007ee6db0180a88cfea28412fee5f5d1ffa73504fe86c381fd78fc8bff103be1042a336bfcd6ab1d01b7d71103c67c8a0358722001c41a4bff8e0198ffc16fc1fe580d8900d3b0f2ffafcf1e00172c84fea0e703fd32f5e9022b5ddefe47d65301b44a5801e746e80269009d021e756ffe8905c802d56dfcff00be8afcdbd4e5fe87bb57fd79f461fd9fb5e4fb64daae010107d3fe2980de021e22d3012cc1a3ffac950200903f3404a6c353fb1ddc36feec176e01a7b481ff0c333dfd30610500b98d7100431f2100f350d802981dda0409ee4cfe61549cfde569e60078d9e5faf67da501eea37bfcaff1c4035e6a7001110114ff11d8effd8a16f004352c34fe11f2400382659500c14c1bf9f454b202eb5f8c017b2c2afd5a5478002f278fff3b507aff2224cdfefe52f5fef02010ffaa296c005f1da700dc6773febb33d4fbc26fe8017f0b7e03617b3d0266191c016d9e7e0254feb7fe0ad8cdfcf45b59029ac767fc0444990057dae6ff6505f9ff383fab01cc7e2f0162f85200b584cc014305cf015b8c43fdeb8b83ffddd58a02af59dc00c7e9a301316f80fc8e6233ff8ff143004ff2ecfc957ba6ff11d8ef01f0f541ff4e5a8901f716dd01c66d5a0227d12503a2057cfe83dc01009758a7ffb809b4fea37be701470e73001a3828ff66f5a4ff554aad01d9b93efed6a1c800c2536eff9f23bc052542ecfe0bd0a4fd7d2e7d014305cfff12a7760017fb0bfcf8dfe7ff2e6807031552fe004d8757ff6fc0ccfebf8f140254597e026dd7c800fbb4bd0246269a016fe0c502ac1fbf016cda49fe3616b5fee3379f027ac03b0132e340fd6ea8fc033f4673009a54cefbf6b6edff58322dfc20aa62feeaccfc010c533700f1b3ca017dc10d00b1f814004435f1fe61549c025b72f1fd5295cffe7503e5feaae7f6011085290176fa38ffed5d35ffacfc4502e78036047995c0fddcb369ff61b735fe406a4403d9869dfc938bfb0060cf5c015e6e9a012de2c60087b203ff2ca1aafeb9df0e02e066c40207f34bfeccca24fc7cf53200bbf90602007297fcaa22c4005dbe8e010a10f001dd98940142e6d6feb96d77fbb62cb6039c367bfe23b1de020dada700c93415fca8d852fb6f2e3e01b78474018a044602194ba803b0386102199e4402490e1a010badfefd9e18d6fdd7dc3efc63c985fc58d0bd01ef0596007e6af00111a64bfe99285800c50223ff7e6f9afe9a6878019f509dfe27e3d0047b32d2fdd63f30fd5ce95efd358acc0182459a02d37e51fcd9e53a05c5f7500300abdffe8b9aacffceaffa042ad8a4fec74dc0ffaa21aeffbb6d1ffdef183dfde6b458fe2efd42037432b1fe18b916fd3ca43f005c88c302490e1afefc39fbfeb2540501954faafefe52f5ff6a825dfefdadbc035158aeffc01afc0222a76101b1a0cd01d776f7fb43f056028b8803ffa483baff7d39d002e8256ffa79487d009abc12febb5d22fdb26d5700e28910fda00880016b5c37fe9ea4be00fb38d20110d7c601ee0dc0febbd90d009ec4b5fe57010dfb0bc9fc00ba854600d7b99602624e70fda9b6d7016f8e29009db839005c4acd0170336200c71b1cfca453c3ff044b43fe7798c9feb875a2ff9c5dcb040f1814ff8dc3a3fe6dea730331138effac6bb3fe34f5910423bf32006df5c4fe7dba66fe0faff8023d701904473e67fe9cb511fca83319ff78b5410329fa1cfe25a189fe0411f7fedb4fa500d1455dfdfdf05a027cafe60121f229fd0712c801a192e40334f2e400a5de2801f579cfffc29b380099fd0801bfe859026f223afe85cbacff6301a7015707b5fe6965e4fd6fa0d2fe7935d701615b420317e7e1ff3b507a03a22ecbff36a29dfd29eccb01342db2fef3ff6501e314f80110093ffd01e904023990c3017f0b7e0062811105fec2db00acf79a00517100fb12e36e0145ed50011ba73e01e9893200c69f31020b18c3feb5b770fededc5e0233c1c3ff54cec200776625fedc1e2c013077aa0464eea2fd07a35dfd82584500fda468fecd460efdc524cbfefc10ad0236bdec0352a31ff9771f8afe9d5a4a01f80eb301736d7efca4f8fc01930d63ff517082ff99764bff63301f00c675e3fea54c9902078c08ffb297a400a144f201105bdbffa22ccbff3cde0b0133b1c70299f8df023224b400a96ae1074e5e87015040df0408a3daff1686cc01271bf003223b710166850b01f2924fff757b2501eeb2f9031d11a9ff20352200f99bc4029d47a1ff1db4e5fe24fc50003b751dff649eb6fd6c66b5ff90e9190350b375fec58763ff9c871aff1f669b02564929fee2bbb40158f7600134a99c00f9ee60ff9c347dfeea27c3010cf87000b653540331138e00a387390317e7e10211df99018de39b01c1d803029588f6fea8f84bff4aa4810030340cfd69d1d1ff2fdbc7fe03bf5b04efb176fe75a91efefe581ffe6dea73ff73c970006219cdfdc524cbfe823ef3ff243dc6015e2127fe624c7200c02af701d397a1005b005b0098b7c002813474022254c5014ea3d0fe9e522001f3dcc1fedbcb9000dd5f48fe643c1cfd1b14aeffc150c700473218ffdad4390224446c015d6c71fd03d8acff8ce075fbdd8b40013b7072feeaccfcfdb02b10ff35058ffdfe42f7018aa97f0092bf7101e7ec23fe82918f031173a8ff18f26200aa8c05ff4db550ff5bbee7fd2c81affeafbf210179e1b8ffae131500feeed9019025e302a79b31ff54cec2fe61f9d500929623ff734d8500cfd19cfe7b781effbcad3d012fd27100671a47ff56951f02f847fffd31063e0236bdec008a7034ff98028bfe5229e201649561fd692c980124870dff39dcbaff7c9497008a9982003c24a9feb16682feb7f9b701c89ed9".to_string(),
        value: 1e18 as u128
    };

    let proof_input = ProofInput {
        predictions,
        truth
    };

    stdin.write(&proof_input);

    let client = ProverClient::new();
    let (pk, vk) = client.setup(ELF);
    let mut proof = client.prove(&pk, stdin).groth16().run().expect("proving failed");

    // Read output.
    let state_root = proof.public_values.read::<[u8; 32]>();
    let total_score = proof.public_values.read::<f32>();
    println!("a: {:?}", state_root);
    println!("b: {:?}", total_score);

    // Verify proof.
    client.verify(&proof, &vk).expect("verification failed");

    // Save proof.
    proof
        .save("proof-with-io.json")
        .expect("saving proof failed");

    println!("successfully generated and verified proof for the program!")
}
